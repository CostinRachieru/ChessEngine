	Chess Engine - Project for Algorithm Design

	Team formed by:
	-> Vlad Tiriplica - 321CA
	-> Costin-Tudor Rachieru - 324CA
	-> Eren Murat - 324CA

	First stage of the project:
		We chose to approach this project from an object oriented perspective:
		-> The boardgame is a Singleton and has an "init()" method that 
	reinitializes the board to the beginning position. This class contains
	the following:
			- A matrix that contains "Piece" elements where there is a piece
		and "null" where it is not.
			- An ArrayList with the white pieces.
			- An ArrayList with the black pieces.
		-> The pieces are created using a factory. Each type of piece (Pawn,
	Root, Knight, Bishop, Queen, King) extends the "Piece" class. Each of this
	pieces has a method that returns the possible moves that can be done from
	its position.

		In this stage we implemented just the movement of the Pawns, and we
	assumed that we will ran out of movements before it will be check mate.
	The engine searches for the first Pawn that can be moved (from left to
	right) and he will try to move one forward / on diagonally / en-passand in
	this order.

		About the comunication with the xboard:
		-> the "xboard" command does not influence the engine.
		-> the "new" command reinitializes the boardgame.
		-> the "force" command makes the engine to not think and just move what
	it's told to be moved. After "force" the engine waits for the "white" or
	"black" command, followed by a "go" command, or just a "go".
		-> the "white" command makes the engine play as white.
		-> the "black" command makes the engine play as black.
		-> the "go" command makes the engine do the next move imediately.
		-> imediately afte the "protover 2" command the engine will tell the
	xboard "feature sigint=0 done=1", so that it will not receive sigint
	interuptions.
		-> at "quit" the engine stops.
		-> after the engine receives a command with the pattern
	letter-number-letter-number(-letter) it thinks the next move and outputs
	"move letter-number-letter-number";